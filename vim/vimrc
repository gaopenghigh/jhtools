" ==========
" 常用快捷键
" ==========

" === 编辑 ===
" A                     在行末追加
" I                     在行首插入
" J                     把两行连起来
" :r FILENAME           向当前文件中插入另外的文件的内容
" :23r FILENAME         把FILENAME的内容插入到第23行
" :1,10 w FILENAME      把1到10行间的内容保存为FILENAME
" :1,10 w >> FILE       把1到10行间的内容追加到FILENAME
" :g/string/d           删除所有包含string的行
" <Ctrl>+a/<Ctrl>+x     增加/减少当前光标下的数字
" u/U                   在选中之后，”U”和”u”分别把选中的部分大写或小写
" !sort                 对文本进行简单排序：用shift v选中多行文本，输入 !sort
" r/<Ctrl>+r            撤销/重复
" </>                   缩进控制

" === 移动 ===
" <Shift> + v           行选择
" <Ctrl> + v            块操作(块选择后按$到行末)
" g_                    到本行最后一个不是blank字符的位置
" gd                    跳到变量声明的地方
" f                     单字符查找命令，”fx” 命令向后查找本行中的字符 x
" F                     类似于f, 但是向左查找
" H,M,L                 分别代表移到当前视野的Home, Middle, Last处
" 20|                   把光标移动到第20列
" <Ctrl> + ]            跳到定义的地方，需要ctags事先生成tag文件
" <Ctrl> + o            返回之前的位置

" === 操作 ===
" :ls                   列出buffer
" 5 + <Ctrl> + ^        跳到第5号buffer
" <Ctrl> + g            显示当前编辑文件中当前光标所在行位置以及文件状态信息
" g + <Ctrl> + g        显示统计信息
" :qall                 全部退出
" :wqall                全部保存退出
" :vs/:split            垂直/水平分割窗口
" :tabedit              新开一个tab编辑
" gt/gT, <C-PgUp/PgDn>  在tab间切换
" :so/:source FILE      Source vim脚本文件, :so % source正在编辑的文件

" === 在tabs和windows之间移动 ===

" map leader键设置
let mapleader = ","
let g:mapleader = ","

" 按<F2>在新tab中编辑文件, 注意下一行末尾是有个空格的:)
nnoremap <F2> :tabedit

" 按 ,1 ,2 ,3等跳到相应的tab
map <leader>1 1gt
map <leader>2 2gt
map <leader>3 3gt
map <leader>4 4gt
map <leader>5 5gt


" ====
" 替换
" ====

" s/old/new/g    当前行中所有old替换成new
" :%s/old/new/   表示将全文中old替换成new，但每行只替换第一个单词
" :%s/old/new/g  表示将全文中所有出现过的old替换成new (所有都替换)
" :g/string/d    删除所有包含string的行
" :v/string/d    删除所有不包含string的行

" ==
" 宏
" ==

" qa    开始录制, 过程记录在寄存器a
" @a    replay寄存器a中的宏
" @@    replay最新录制的宏
" 20@a  replay 20遍a中的宏

" vm_1

" ========
" 全局设置
" ========

" === 备份和保存 ===
set nobackup        " 关闭备份
set nowb            " 当覆盖一个文件时没有备份
set noswapfile      " 没有swap文件
set hid             " 切换buffer时不自动保存
set autowrite       " 做buffer切换等操作时，自动把内容写回文件

" 重新打开一个文件时跳到上一次编辑的地方
if has("autocmd")
   autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif
" autocmd:
" 在文件读写，缓冲区或窗口进出，甚至 Vim退出等时刻，可以指定要自动执行的命令


" === 显示 ===
set showmatch       " 显示括号配对
set linebreak       " 整词换行
set incsearch       " 输入字符串就显示匹配点
set hlsearch        " 高亮搜索结果
set number          " 显示行号
set title           " 在title bar上显示信息

" === 状态行 ===
set laststatus=2    " 显示状态行，0不显示, 1当窗口数大于1是显示, 2总是显示
set ruler           " 显示标尺

" ====
" 外观
" ====

syntax on
set background=dark

colorscheme molokai " 最好的颜色主题 https://github.com/tomasr/molokai
let g:rehash256 = 1

" ====
" 格式
" ====

set tabstop=4       " 1 tab = 4 spaces
set shiftwidth=4    " 缩进规格为4个空格
set expandtab       " 使用空格代替tab, 输入:re可以把tab替换为空格
set autoindent      " 自动缩进
set smartindent     " Smart缩进

" 删除末尾的空格
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py,*.rb,*.sh,*.md,*.markdown,*.go :call DeleteTrailingWS()

" ==================
" 使用Vundle管理插件
" ==================

" 使用Vundle来管理插件 https://github.com/gmarik/Vundle.vim
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
set nocompatible
filetype off " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Use Vundle to Manage Vundle
Plugin 'gmarik/vundle'
Plugin 'genutils'
Plugin 'taglist.vim'
Plugin 'TaskList.vim'
Plugin 'django.vim'
Plugin 'jQuery'
Plugin 'python.vim'
Plugin 'Syntastic'
Plugin 'pyflakes'
Plugin 'L9'
Plugin 'FuzzyFinder'
Plugin 'vim-powerline'
Plugin 'c.vim'

filetype plugin indent on
"let python_highlight_all = 1
